snippet iferr "Common error handling pattern" b
if ${1:val}, err := ${2:func} ; err != nil {
	${3}
}
endsnippet

snippet printv "Print a variable to stdout" b
fmt.Printf("${1:var}: %${2:s}", $1)
endsnippet

snippet quote "Put in quotes"
"${1:${VISUAL:text}}"
endsnippet

snippet clidebug "Debug all command vars" b
flag.VisitAll(func(f *flag.Flag) {
	logger.Debug("Flag",
		zap.String("name", f.Name),
		zap.Any("value", f.Value),
		zap.String("defvalue", f.DefValue),
	)
})
endsnippet

snippet errtype "Define a custom error type" b
type ${1:MyNewError} struct {
	${2:field} ${3:type}
}

func (e *$1) Error() string {
	return fmt.Sprintf(
		"${4:message}",
		${5:value},
	)
}
endsnippet

snippet tdt "Table driven tests" b
func Test${1:Method}(t *testing.T) {

	testCases := []struct {
		name string
	}{
		{
			
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.name, func(t *testing.T) {

		})
	}
}
endsnippet

snippet ae "Assert equal" b
if !reflect.DeepEqual(${1:expected}, ${2:actual}) {
	t.Errorf("${3:obj} expected:\n%#v\nActual:\n%#v\n",
		$1, $2)
}
endsnippet

snippet aem "Assert equal method" b
func assert${1:obj} (method string, expected, actual ${2:type}, t *testing.T) {
	if !reflect.DeepEqual(expected, actual) {
		t.Errorf("%s $1 expected:\n%#v\nActual:\n%#v\n",
			method, expected, actual)
	}
}
endsnippet

snippet aee "Assert equal error" b
if reflect.TypeOf(${1:expected}) != reflect.TypeOf(${2:actual}) {
	t.Errorf("err type expected:\n%#v\nactual:\n%#v\n",
		$1, $2)
}
endsnippet

snippet todo "TODO" b
// TODO(${1:bclarkx2}): 
endsnippet

snippet newtype "Create a new interface type" b
type ${1:Interface} interface {

}

type ${2:implementation} struct {
	
}

func New$1() *$2 {
	return &$2{
		
	}
}
endsnippet
