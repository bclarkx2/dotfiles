snippet iferr "Common error handling pattern" b
if ${1:val}, err := ${2:func} ; err != nil {
	${3}
}
endsnippet

snippet printv "Print a variable to stdout" b
fmt.Printf("${1:var}: %${2:s}", $1)
endsnippet

snippet quote "Put in quotes"
"${1:${VISUAL:text}}"
endsnippet

snippet clidebug "Debug all command vars" b
flag.VisitAll(func(f *flag.Flag) {
	logger.Debug("Flag",
		zap.String("name", f.Name),
		zap.Any("value", f.Value),
		zap.String("defvalue", f.DefValue),
	)
})
endsnippet

snippet errtypet "Define a test custom error type" b
type ${1:TestError} struct{}

func (e *$1) Error() string {
	return "$1"
}
endsnippet

snippet errtype "Define a custom error type" b
type ${1:MyNewError} struct {
	${2:field} ${3:type}
}

func (e *$1) Error() string {
	return fmt.Sprintf(
		"${4:message}",
		${5:value},
	)
}
endsnippet

snippet cdt "Closure driven tests" b
func Test_${1:FunctionName}(t *testing.T) {
	type testCase struct {
		expected   ${2:ExpectedType}
		errorCheck expect.ErrorCheck
	}
	run := func(name string, testCase testCase) {
		t.Helper()
		t.Run(name, func(t *testing.T) {
			t.Helper()
			actual, err := ${3:TestExpression},
			testCase.errorCheck(t, err)
			expect.Equal(t, actual, testCase.expected)
		})
	}

	run("Success", testCase{
		errorCheck: expect.ErrorNil,
	})
}
endsnippet

snippet tdt "Table driven tests" b
func Test_${1:Method}(t *testing.T) {
	${2:type fields struct {
		${3:field}
	}}${2/(.*)/(?0::)/}${4:type args struct {
		${5:arg}
	}}${4/(.*)/(?0::)/}${6:type expected struct {
		${7:expected}
	}}${6/(.*)/(?0::)/}testCases := []struct {
		name string${2/(.*fields.*)/(?0:		fields fields:)/}${4/.*args.*/(?0:		args args)/}${6/.*expected.*/(?0:		expected expected)/}
		$8
	}{
		{
			name: "",
		},
	}

	for _, tt := range testCases {
		t.Run(tt.name, func(t *testing.T) {
			$0
		})
	}
}
endsnippet

snippet tdtc "Table driven test case" b
{
	name: "${1:name}",
	${2:fields: fields{
		${3:field},	
	},}${2/(.*)/(?0::)/}${4:args: args{
		${5:arg},
	},}${4/(.*)/(?0::)/}${6:expected: expected{
		${7:expect},
	},}
	${8:err: $9,}${8/(.*)/(?0::)/}},
endsnippet

snippet ae "Assert equal" b
if !reflect.DeepEqual(${1:tt.expected.$2}, ${3:actual}) {
	t.Errorf("${4:$3} expected:\n%#v\nActual:\n%#v\n",
		$1, $3)
}
endsnippet

snippet aem "Assert equal method" b
func assert${1:obj} (t *testing.T, method string, expected, actual ${2:type}) {
	if !reflect.DeepEqual(expected, actual) {
		t.Errorf("%s $1 expected:\n%#v\nActual:\n%#v\n",
			method, expected, actual)
	}
}
endsnippet

snippet aee "Assert equal error" b
if reflect.TypeOf(${1:expected}) != reflect.TypeOf(${2:actual}) {
	t.Errorf("err type expected:\n%#v\nactual:\n%#v\n",
		$1, $2)
}
endsnippet

snippet ad "Assert diff" b
if diff := cmp.Diff(${1:tt.$2}, ${3:actual}); diff != "" {
	t.Errorf("\nUnexpected $3:\n%s\n", diff)
}
endsnippet

snippet adm "Assert diff method" b
func assert${1:obj} (t *testing.T, method string, expected, actual ${2:type}) {
	if diff := cmp.Diff(expected, actual); diff != "" {
		t.Errorf("\nUnexpected $1:\n%s\n", diff)
	}
}
endsnippet

snippet todo "TODO" b
// TODO(${1:bclarkx2}): 
endsnippet

snippet newtype "Create a new interface type" b
type ${1:Interface} interface {

}

type ${2:implementation} struct {
	
}

func New$1() *$2 {
	return &$2{
		
	}
}
endsnippet

snippet mss "map[string]string" w
map[string]string
endsnippet

snippet msf "map[string]float64" w
map[string]float64
endsnippet

snippet msi "map[string]interface{}" w
map[string]interface{}
endsnippet

snippet route "HTTP route handler" b
func ${1:(a *app)} ${2:route}Handler(r *http.Request) (int, interface{}) {
    var (
        ctx = r.Context()
	logger = service.LoggerFromCtx(ctx)
    )
    
    return http.StatusOK, interface{} 
}
endsnippet

snippet jsonu "JSON Unmarshal" b
${1:var ${2:target} ${3:type}}
if err := json.Unmarshal(${4:json}, &$2); err != nil {
	${5:return ${6:nil}, ${7:${8:err}}}
}
endsnippet

snippet jsonm "JSON Marshal" b
${1:data}, err := json.Marshal(${2:obj})
endsnippet

snippet store "Postgres store" b

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/golang-migrate/migrate/v4"
	"github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
	"github.com/lib/pq"
	"github.com/nicheinc/go-common/v12/guid"
	"github.com/nicheinc/go-common/v12/logging"
	"go.uber.org/zap"
)

type store struct {
	db *sql.DB

	stmt *sql.Stmt

	logger *zap.Logger
}

// NewStore is a function for creating a concrete instance of the
// Store interface
func NewStore(ctx context.Context, connectionString string, backoff time.Duration, migrationSource string, logger *zap.Logger) (Store, error) {
	var (
		s = store{
			logger: logger,
		}
		err error
	)

	if s.db, err = sql.Open("postgres", connectionString); err != nil {
		return nil, err
	}

	if err := s.waitForConnection(ctx, backoff); err != nil {
		return nil, err
	}

	if err := s.migrate(migrationSource); err != nil {
		return nil, fmt.Errorf("error migrating database schema: %w", err)
	}

	if err := s.prepareStmts(ctx); err != nil {
		return nil, err
	}

	return &s, nil
}

func (s *store) waitForConnection(ctx context.Context, backoff time.Duration) error {
	// Try to ping database until context timeout is reached
	for {
		if err := s.db.PingContext(ctx); err != nil {
			s.logger.Warn("Error connecting to postgres database", zap.Error(err))

			select {
			case <-time.After(backoff):
				continue
			case <-ctx.Done():
				// Return last ping error
				return fmt.Errorf("error connecting to postgres database: %s", err)
			}
		}
		s.logger.Info("Connected to postgres database")
		return nil
	}
}

func (s *store) migrate(migrationSource string) error {
	driver, err := postgres.WithInstance(s.db, &postgres.Config{})
	if err != nil {
		return fmt.Errorf("error creating migration database instance: %w", err)
	}

	m, err := migrate.NewWithDatabaseInstance(
		migrationSource,
		"postgres", driver,
	)
	if err != nil {
		return fmt.Errorf("error creating migrate instance: %w", err)
	}

	oldVersion, dirty, err := m.Version()
	switch {
	case err != nil:
		return fmt.Errorf("error checking current database schema version: %w", err)
	case dirty:
		return fmt.Errorf("dirty database schema, version: %d", oldVersion)
	}

	if err := m.Up(); err != nil && err == migrate.ErrNoChange {
		s.logger.Debug("No database migration necessary",
			zap.Uint("version", oldVersion),
		)
	} else if err != nil {
		return fmt.Errorf("error performing migration to latest version: %w", err)
	} else {
		newVersion, dirty, err := m.Version()
		if err != nil {
			return fmt.Errorf("error checking database schema version after migration: %w", err)
		} else if dirty {
			return fmt.Errorf("dirty database schema after migration, version: %d", newVersion)
		}
		s.logger.Debug("Database migrated to latest version",
			zap.Uint("oldVersion", oldVersion),
			zap.Uint("newVersion", newVersion),
		)
	}
	return nil
}

func (s *store) prepareStmts(ctx context.Context) error {
	var err error

	if s.stmt, err = s.db.Prepare(`
		`,
	); err != nil {
		return &PreparedStmtError{Stmt: "schemaStmt", Err: err}
	}

	return nil
}

// Close safely closes and disposes the store's database connection
func (s *store) Close() error {
	if err := s.stmt.Close(); err != nil {
		return err
	}
	return s.db.Close()
}

endsnippet

snippet fetch "Fetch from db" b
rows, err := s.stmt.QueryContext(
	ctx,
)
if err != nil {
	return nil, fmt.Errorf("error querying results: %w", err)
}
defer rows.Close()

results := []Result{}
for rows.Next() {
	var (
		result Result
	)
	if err := rows.Scan(
		&result.ID,
	); err != nil {
		return nil, fmt.Errorf("error scanning result: %w", err)
	}

	results = append(results, result)
}
if err := rows.Err(); err != nil {
	return nil, fmt.Errorf("error iterating over results: %w", err)
}

return results, nil
endsnippet

snippet insert "Insert into db" b
	if result, err := ${1:insertStmt}.ExecContext(
		ctx,
	); err != nil {
		return fmt.Errorf("error inserting ${2:item}: %w", err)
	} else if affected, err := result.RowsAffected(); err != nil {
		return fmt.Errorf("error inserting $2: error getting number of rows affected: %w", err)
	} else if affected != ${3:rows} {
		return fmt.Errorf("error inserting $2: incorrect number of rows affected: %d (expected: $3)", affected)
	}
	return nil
endsnippet

snippet prepareStmt "Prepare a sql stmt" b
	if s.${1:stmt}, err = s.db.PrepareContext(ctx, `
		`,
	); err != nil {
		return
	}
endsnippet

snippet ctx "context!" w
ctx context.Context
endsnippet

snippet logger "logger!" w
logger *zap.Logger
endsnippet

snippet uuidt "test uuid" b
${1:uuid1} = guid.MustParse("${2:uuid}")
endsnippet

snippet timet "test time" w
${1:time1}, _ = time.Parse(time.RFC3339, "2000-01-01T02:03:04.555Z")
endsnippet

snippet sort "implement sort.Interface" b
func (${1:t} ${2:*Type}) Len() int {
	return ${3:len($1)}
}

func ($1 $2) Less(i, j int) bool {
	return ${4:$1[i].${5:prop} < $1[j].$5}
}

func ($1 $2) Swap(i, j int) {
	${6:$1[i], $1[j] = $1[j], $1[i]}
}
endsnippet

snippet app "append to a slice" w
${1:slice} = append($1, ${2:val})
endsnippet

snippet testlogger "create a logger for endpoint testing" b
	raw := []byte(\`{
		"level": "error",
		"development": false,
		"disableCaller": false,
		"disableStacktrace": false,
		"encoding": "console",
		"encoderConfig": {
			"messageKey": "msg",
			"levelKey": "level",
			"levelEncoder": "lowercase",
			"timeKey": "ts",
			"nameKey": "name",
			"callerKey": "caller",
			"stacktraceKey": "stacktrace",
			"lineEnding": "\n",
			"timeEncoder": "iso8601"
		},
		"outputPaths": ["stderr"],
		"errorOutoutPaths": ["stderr"]
	}\`)

	var config zap.Config
	err := json.Unmarshal(raw, &config)
	if err != nil {
		panic(err)
	}

	opts := []zap.Option{
		zap.AddStacktrace(zapcore.ErrorLevel),
	}

	logger, err := config.Build(opts...)
	if err != nil {
		panic(err.Error())
	}
endsnippet
